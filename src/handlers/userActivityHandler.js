const {Timestamp} = require('@google-cloud/firestore');
const {db} = require('../../firestore');
const axios = require('axios');

const getActivityRecomendation = async (request, h) => {
  try {
    const user = request.authUser;
    const {startTime, endTime} = request.query;

    const dst = new Date(startTime);
    const st = dst.getUTCHours() * 60 + dst.getMinutes();
    const det = new Date(endTime);
    const et = det.getUTCHours() * 60 + det.getMinutes();
    const dur = et - st;

    const activityRecomendationsRes = await axios.get(
      'http://34.173.91.244/activity?' +
        'age=' +
        user.age +
        '&lastEducation=' +
        user.lastEducation +
        '&job=' +
        user.job +
        '&gender=' +
        user.gender +
        '&education=' +
        user.education +
        '&employmentType=' +
        user.employmentType +
        '&startTime=' +
        st +
        '&duration=' +
        dur,
    );
    const activityRecomendations = activityRecomendationsRes.data;

    const activities = [];
    for (const key in activityRecomendations) {
      activities.push(activityRecomendations[key]);
    }

    const response = h.response({
      data: activities,
    });
    response.code(200);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};

const createUserActivityHandler = async (request, h) => {
  try {
    const {activityName, description, startTime, endTime, finishTime} =
      request.payload;
    const userId = request.authUser.email;

    // check request body payload
    if (!activityName || !startTime || !endTime) {
      const response = h.response({
        message: 'bad request',
      });
      response.code(400);
      return response;
    }

    const dst = new Date(startTime);
    const st = dst.getUTCHours() * 60 + dst.getMinutes();
    const det = new Date(endTime);
    const et = det.getUTCHours() * 60 + det.getMinutes();
    const dur = et - st;

    const user = request.authUser;
    const difficultyRes = await axios.get(
      'http://34.173.91.244/difficulty?' +
        'age=' +
        user.age +
        '&lastEducation=' +
        user.lastEducation +
        '&job=' +
        user.job +
        '&gender=' +
        user.gender +
        '&education=' +
        user.education +
        '&employmentType=' +
        user.employmentType +
        '&activityName=' +
        activityName +
        '&startTime=' +
        st +
        '&duration=' +
        dur,
    );
    const difficulty = difficultyRes.data;

    // create a new activities with autogenerated id
    const activitiesRes = await db.collection('userActivities').add({
      userId: userId,
      activityName: activityName,
      description: description || '',
      startTime: Timestamp.fromDate(new Date(startTime)),
      endTime: Timestamp.fromDate(new Date(endTime)),
      finishTime:
        finishTime !== undefined
          ? Timestamp.fromDate(new Date(finishTime))
          : null,
      finish: false,
      difficulty: difficulty.difficulty,
      exp: difficulty.exp,
    });
    // update the activities id property
    db.collection('userActivities').doc(activitiesRes.id).update({
      activityId: activitiesRes.id,
    });

    const response = h.response({
      message: 'activity successfully created',
      data: {
        activityId: activitiesRes.id,
      },
    });
    response.code(201);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};

const getAllUserActivitiesHandler = async (request, h) => {
  try {
    const {name} = request.query;
    const userId = request.authUser.email;

    const userActivities = [];
    const userActivitiesRef = await db.collection('userActivities');

    if (name) {
      const userActivitiesResByName = await userActivitiesRef
        .where('activityName', '>=', name)
        .where('activityName', '<=', name + '\uf8ff')
        .get();
      userActivitiesResByName.forEach((doc) => {
        userActivities.push({
          activityId: doc.data().activityId,
          activityName: doc.data().activityName,
          description: doc.data().description,
          startTime: new Date(doc.data().startTime.seconds * 1000),
          endTime: new Date(doc.data().endTime.seconds * 1000),
          finishTime:
            doc.data().finishTime !== null
              ? new Date(doc.data().finishTime.seconds * 1000)
              : null,
          finish: doc.data().finish,
          difficulty: doc.data().difficulty,
          exp: doc.data().exp,
        });
      });

      const response = h.response({
        message: 'oke',
        data: userActivities,
      });
      response.code(200);
      return response;
    }

    const userActivitiesRes = await userActivitiesRef
      .where('userId', '==', userId)
      .get();
    userActivitiesRes.forEach((doc) => {
      userActivities.push({
        activityId: doc.data().activityId,
        activityName: doc.data().activityName,
        description: doc.data().description,
        startTime: new Date(doc.data().startTime.seconds * 1000),
        endTime: new Date(doc.data().endTime.seconds * 1000),
        finishTime:
          doc.data().finishTime !== null
            ? new Date(doc.data().finishTime.seconds * 1000)
            : null,
        finish: doc.data().finish,
        difficulty: doc.data().difficulty,
        exp: doc.data().exp,
      });
    });

    const response = h.response({
      data: userActivities,
    });
    response.code(200);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};

const getUserActivityHandler = async (request, h) => {
  try {
    const {activityId} = request.params;

    // Get activity id from database collection userActivities
    const userActivitiesRef = await db.collection('userActivities');
    const userActivity = await userActivitiesRef.doc(activityId).get();

    // check if activity exist
    if (!userActivity.exists) {
      const response = h.response({
        message: `activity ${activityId} does not exist`,
      });
      response.code(404);
      return response;
    }

    const response = h.response({
      data: {
        activityId: userActivity.data().activityId,
        activityName: userActivity.data().activityName,
        description: userActivity.data().description,
        startTime: new Date(userActivity.data().startTime.seconds * 1000),
        endTime: new Date(userActivity.data().endTime.seconds * 1000),
        finishTime:
          userActivity.data().finishTime !== null
            ? new Date(userActivity.data().finishTime.seconds * 1000)
            : null,
        finish: userActivity.data().finish,
        difficulty: userActivity.data().difficulty,
        exp: userActivity.data().exp,
      },
    });
    response.code(200);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};

const updateUserActivityHandler = async (request, h) => {
  try {
    const {activityId} = request.params;
    const {activityName, description, startTime, endTime, finishTime} =
      request.payload;

    // check request body payload
    if (
      !activityName &&
      !description &&
      !startTime &&
      !endTime &&
      !finishTime
    ) {
      const response = h.response({
        message: 'no content',
      });
      response.code(204);
      return response;
    }

    const userActivitiesRef = await db.collection('userActivities');
    const userActivity = await userActivitiesRef.doc(activityId).get();

    // check if activity exists
    if (!userActivity.exists) {
      const response = h.response({
        message: `activity ${activityId} does not exist`,
      });
      response.code(404);
      return response;
    }

    // check the undefined properties
    const updatedActivity = {};
    if (activityName) {
      updatedActivity.activityName = activityName;
    }
    if (description) {
      updatedActivity.description = description;
    }
    if (startTime) {
      updatedActivity.startTime = Timestamp.fromDate(new Date(startTime));
    }
    if (endTime) {
      updatedActivity.endTime = Timestamp.fromDate(new Date(endTime));
    }
    if (finishTime) {
      updatedActivity.finishTime = Timestamp.fromDate(new Date(finishTime));
      updatedActivity.finish = true;
    }

    userActivitiesRef.doc(activityId).update(updatedActivity);

    const response = h.response({
      message: 'user activity successfully updated',
    });
    response.code(200);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};

const deleteUserActivityHandler = async (request, h) => {
  try {
    const {activityId} = request.params;

    const userActivitiesRef = await db.collection('userActivities');
    const userActivity = await userActivitiesRef.doc(activityId).get();

    // check if activity exists
    if (!userActivity.exists) {
      const response = h.response({
        message: `activity ${activityId} does not exist`,
      });
      response.code(404);
      return response;
    }

    userActivitiesRef.doc(activityId).delete();

    const response = h.response({
      message: 'user activity successfully deleted',
    });
    response.code(200);
    return response;
  } catch (err) {
    const response = h.response({
      message: err.message,
    });
    response.code(500);
    return response;
  }
};
module.exports = {
  getActivityRecomendation,
  createUserActivityHandler,
  getAllUserActivitiesHandler,
  getUserActivityHandler,
  updateUserActivityHandler,
  deleteUserActivityHandler,
};
